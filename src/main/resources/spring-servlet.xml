<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
		"
	default-lazy-init="true">
<!-- 1.注解支持controller和RequestMapping -->
	<!-- 自动注册DefaultAnnotationHandlerMapping与AnnotationMethodHandlerAdapter 两个bean,是spring MVC为@Controllers分发请求所必须的 -->
	<mvc:annotation-driven />
<!-- 2.扫描Controller -->
	<context:component-scan base-package="com.mavendemo.springtx.controller">
		<context:exclude-filter type="annotation"  expression="org.springframework.stereotype.Service" />
		<context:exclude-filter type="annotation"  expression="org.springframework.stereotype.Repository" />
	</context:component-scan>
<!-- 3.配置controller方法中对return的jsp或freemark页面 -->
	<!-- 3.1.配置freemark -->
	<bean id="FMViewResolver" class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
		<!-- 3.1.1.处理器必填 -->
		<property name="viewClass" value="org.springframework.web.servlet.view.freemarker.FreeMarkerView"/>
		<!-- 3.1.2.扫描的路径1和文件后缀2 -->
		<!-- 备注：
			配置prefix是为了给jsp视图用的，freemarker视图不需要prefix，
			因为FreemarkerView内部会使用配置的FreeMarkerConfigurer，
			并用FreeMarkerConfigurer内部的templateLoaderPath属性作为前缀，
			配置的suffix是为了让FreemarkerView使用，当后缀 -->
		<property name="prefix" value="/jsp/" />
		<property name="suffix" value=".html" />
		<!-- 3.1.3.要和上面3.2.2.一致-->
		<property name="viewNames" value="*html" />
		<!-- 3.1.4.配置contentType-->
		<property name="contentType" value="text/html;charset=utf-8"/>
		<!-- 3.1.5.配置缓存 -->
		<property name="cache" value="true" />
		<!-- 3.1.6.配置视图级别-->
		<property name="order" value="0"/>
	</bean>
	<!-- 3.2.配置jsp -->
	<bean id="JSPViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 3.2.1.处理器必填 -->
		<property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
		<!-- 3.2.2.扫描的路径1和文件后缀2 -->
		<property name="prefix" value="/jsp/" />
		<property name="suffix" value=".jsp" />
		<!-- 3.2.3.要和上面3.2.2.一致-->
		<!-- 访问index的时候viewNames中的"*"改成"index1"。那么就报错了，因为处理视图名的时候index匹配不上index1。eg:*jsp在Controller的return必须有jsp结尾即jsp.jsp -->
		<property name="viewNames" value="*" />
		<!-- 3.2.4.配置contentType-->
		<property name="contentType" value="text/html; charset=utf-8"/>
		<!-- 3.2.5.配置视图级别-->
		<property name="order" value="1"/>
	</bean>
<!-- 4.配置静态资源文件 -->
	<!-- 4.1.默认的Servlet来响应静态文件 -->
    <mvc:default-servlet-handler/>
    <!-- 4.2.URL被当做静态资源，由Spring的ResourceHttpRequestHandler读出到内存中再响应http -->
    <!-- 备注：location指定静态资源的位置.可以是web application根目录下、jar包里面，这样可以把静态资源压缩到jar包中。cache-period 可以使得静态资源进行web cache  -->
    <!--
    <mvc:resources mapping="/images/**" location="/images/" cache-period="31556926"/>
    <mvc:resources mapping="/js/**" location="/js/" cache-period="31556926"/>
    <mvc:resources mapping="/css/**" location="/css/" cache-period="31556926"/>
	 -->
	<bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
	    <property name="defaultErrorView">
	        <value>/error/error</value>
	    </property>
	    <property name="defaultStatusCode">
	        <value>500</value>
	    </property>
		<property name="warnLogCategory">
	        <value>org.springframework.web.servlet.handler.SimpleMappingExceptionResolver</value>
	    </property>
	</bean>
</beans>
